// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

//Heatmap Stuff
RWTexture2D<float> _Output;
int _PointCount;
float _Radius;

//Point Stuff
struct Point
{
    float2 position;
    int priority;
    int description_index;
    int officer_initiated;
};

StructuredBuffer<Point> _Points;
StructuredBuffer<int> _WriteDescription; //200
//0, 1, 2, 3, 4, 5, NonOfficerInitiated, OfficerInitiated
StructuredBuffer<int> _VarsToRender; //8

#define RenderNonOfficerInitiated _VarsToRender[6] == 1
#define RenderOfficerInitiated _VarsToRender[7] == 1

[numthreads(8,8,1)]
void CSMain(uint3 id : SV_DispatchThreadID)
{
    float h = 0;
    for (int i = 0; i < _PointCount; i++)
    {
        Point p = _Points[i];
        const bool render =
            _WriteDescription[_Points[i].description_index] == 1
            && (!p.officer_initiated && RenderNonOfficerInitiated || p.officer_initiated && RenderOfficerInitiated)
            && _VarsToRender[p.priority] == 1;

        const half di = distance(id.xy, _Points[i].position);
        const half hi = 1 - saturate(di / _Radius);
        h += hi * (render ? 1 : 0);
    }
    h /= 1000;
    _Output[id.xy] = h;
}
